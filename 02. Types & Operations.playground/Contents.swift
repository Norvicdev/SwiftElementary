import UIKit

// Part 1. Type conversion (–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤)

var integer: Int = 100
var decimal: Double = 12.5
// –ù—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–∏–ø—É Int
integer = Int(decimal) // 12

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ (Operators with mixed types)
let hourlyRate: Double = 19.5
let hoursWorked: Int = 10
let totalCost: Double = hourlyRate * Double(hoursWorked)

// –í—ã–≤–æ–¥ —Ç–∏–ø–∞ (Type inference)
let typeInferredInt = 42
let typeInferredDouble = 3.14159

let wantADouble = 3
//let actuallyDouble = Double(3)
//let actuallyDouble: Double = 3
let actuallyDouble = 3 as Double

// TYPES. –ú–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (Mini-exercises)

let age1 = 42
let age2 = 21

let avg1 = (age1 + age2) / 2 // 31
// –û–±–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ / —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è.

let avg2 = (Double(age1) + Double(age2)) / 2 // 31.5
// –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ / —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º. –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ 2 —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.

// Part 2. Strings (–°—Ç—Ä–æ–∫–∏)

// –°–∏–º–≤–æ–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏ (Characters and strings)
let characterA: Character = "a"
let characterDog: Character = "üê∂"

let stringDog = "Dog" // Inferred to be of type String (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç —Ç–∏–ø String)

// 2.1. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è (Concatenation)

var message = "Hello" + " my name is "
let name = "Matt"
message += name // "Hello my name is Matt"

let exclamationMark: Character = "!"
message += String(exclamationMark) // "Hello my name is Matt!"

// 2.2. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (Interpolation)

message = "Hello my name is \(name)!" // "Hello my name is Matt!"

let oneThird = 1.0 / 3.0 // 0.3333333333333333
let oneThirdLongString = "One third is \(oneThird) as a decimal." // "One third is 0.3333333333333333 as a decimal." (–û–¥–Ω–∞ —Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0,3333333333333333 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ.)

let multiplier = 3
let messages = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)" // "3 times 2.5 is 7.5"

// 2.3. –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (Multi-line strings)

/*
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2 // "hello there"

let exclamationMark: Character = "!"
welcome.append(exclamationMark) // "hello there!"

let badStart = """
one
two
"""

let end = """
three
"""
print(badStart + end)
// one
// twothree

let goodStart = """
one
two

"""
print(goodStart + end)
// one
// two
// three
*/

let bigString = """
  You can have a string
  that contains multiple
  lines
  by
  doing this.
  """
print(bigString)
//You can have a string
//that contains multiple
//lines
//by
//doing this.


// STRINGS. –ú–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (Mini-exercises)

let firstName: String = "Serg"
let lastName: String = "Piccalo"
let fullName = firstName + " " + lastName // Serg Piccalo
let myDetails = "Hello, my name is \(fullName)." // "Hello, my name is Serg Piccalo."

// Part 3. Tuples (–ö–æ—Ä—Ç–µ–∂–∏)

// let coordinates: (Int, Int) = (2, 3)
let coordinates = (2, 3)
let coordinatesDouble = (2.1, 3.5)
// Inferred to be of type (Double, Double) (–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ —Ç–∏–ø—É ... )

let coordinatesMixed = (2.1, 3)
// Inferred to be of type (Double, Int)

// –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º –≤ –∫–æ—Ä—Ç–µ–∂–µ
let x1 = coordinates.0 // 2
let y1 = coordinates.1 // 3

let coordinatesNamed = (x: 2, y: 3) // Inferred to be of type (x: Int, y: Int)

// –¥–æ—Å—Ç—É–ø –∫ —á–∞—Å—Ç–∏ –∫–æ—Ä—Ç–µ–∂–∞ –ø–æ –∏–º–µ–Ω–∏
let x2 = coordinatesNamed.x
let y2 = coordinatesNamed.y

// —Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º —á–∞—Å—Ç—è–º –∫–æ—Ä—Ç–µ–∂–∞
let coordinates3D = (x: 2, y: 3, z: 1)
let (x3, y3, z3) = coordinates3D
// –∫–æ–¥ –≤—ã—à–µ —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç–µ–Ω —Å–ª–µ–¥—É—é—â–µ–º—É
//let x3 = coordinates3D.x
//let y3 = coordinates3D.y
//let z3 = coordinates3D.z

// —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫–æ—Ä—Ç–µ–∂–∞
let (x4, y4, _) = coordinates3D

// TUPLES. –ú–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (Mini-exercises)

// let temperature = (10, 01, 2022, 34.5)
// let temperature = (month: 10, day: 01, year: 2022, averageTemperature: 34.5)
var temperature = (month: 10, day: 01, year: 2022, averageTemperature: 34.5)
let (_, day, _, averageTemperature) = temperature
temperature.averageTemperature = 21.2


// Part 4. –ü—Å–µ–≤–¥–æ–Ω–∏–º—ã —Ç–∏–ø–æ–≤ (Type aliases)
typealias Animal = String
let myPet: Animal = "Dog"

typealias Coordinates = (Int, Int)
let xy: Coordinates = (2, 4)

