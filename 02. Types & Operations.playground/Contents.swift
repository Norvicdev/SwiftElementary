import UIKit

// Part 1. Type conversion (–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤)

var integer: Int = 100
var decimal: Double = 12.5
// –ù—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤—ã—Ä–∞–∂–µ–Ω–∏—è –∫ —Ç–∏–ø—É Int
integer = Int(decimal) // 12

// –û–ø–µ—Ä–∞—Ç–æ—Ä—ã —Å–æ —Å–º–µ—à–∞–Ω–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ (Operators with mixed types)
let hourlyRate: Double = 19.5
let hoursWorked: Int = 10
let totalCost: Double = hourlyRate * Double(hoursWorked)

// –í—ã–≤–æ–¥ —Ç–∏–ø–∞ (Type inference)
let typeInferredInt = 42
let typeInferredDouble = 3.14159

let wantADouble = 3
//let actuallyDouble = Double(3)
//let actuallyDouble: Double = 3
let actuallyDouble = 3 as Double

// TYPES. –ú–∏–Ω–∏-—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (Mini-exercises)

let age1 = 42
let age2 = 21

let avg1 = (age1 + age2) / 2 // 31
// –û–±–∞ –æ–ø–µ—Ä–∞–Ω–¥–∞ / —è–≤–ª—è—é—Ç—Å—è —Ü–µ–ª—ã–º–∏ —á–∏—Å–ª–∞–º–∏, –ø–æ—ç—Ç–æ–º—É –æ–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–µ –¥–µ–ª–µ–Ω–∏–µ, –∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —É—Å–µ–∫–∞–µ—Ç—Å—è.

let avg2 = (Double(age1) + Double(age2)) / 2 // 31.5
// –ü–µ—Ä–≤—ã–π –æ–ø–µ—Ä–∞–Ω–¥ / —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º. –ò–∑-–∑–∞ —ç—Ç–æ–≥–æ 2 —Ç–∞–∫–∂–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–≤–æ–π–Ω—ã–º, –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.

// Part 2. Strings (–°—Ç—Ä–æ–∫–∏)

// –°–∏–º–≤–æ–ª—ã –∏ —Å—Ç—Ä–æ–∫–∏ (Characters and strings)
let characterA: Character = "a"
let characterDog: Character = "üê∂"

let stringDog = "Dog" // Inferred to be of type String (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –∏–º–µ–µ—Ç —Ç–∏–ø String)

// 2.1. –ö–æ–Ω–∫–∞—Ç–µ–Ω–∞—Ü–∏—è (Concatenation)

var message = "Hello" + " my name is "
let name = "Matt"
message += name // "Hello my name is Matt"

let exclamationMark: Character = "!"
message += String(exclamationMark) // "Hello my name is Matt!"

// 2.2. –ò–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è (Interpolation)

message = "Hello my name is \(name)!" // "Hello my name is Matt!"

let oneThird = 1.0 / 3.0 // 0.3333333333333333
let oneThirdLongString = "One third is \(oneThird) as a decimal." // "One third is 0.3333333333333333 as a decimal." (–û–¥–Ω–∞ —Ç—Ä–µ—Ç—å —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç 0,3333333333333333 –≤ –¥–µ—Å—è—Ç–∏—á–Ω–æ–º –≤–∏–¥–µ.)

let multiplier = 3
let messages = "\(multiplier) times 2.5 is \(Double(multiplier) * 2.5)" // "3 times 2.5 is 7.5"

// 2.3. –ú–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ (Multi-line strings)

/*
let string1 = "hello"
let string2 = " there"
var welcome = string1 + string2 // "hello there"

let exclamationMark: Character = "!"
welcome.append(exclamationMark) // "hello there!"

let badStart = """
one
two
"""

let end = """
three
"""
print(badStart + end)
// one
// twothree

let goodStart = """
one
two

"""
print(goodStart + end)
// one
// two
// three
*/

let bigString = """
  You can have a string
  that contains multiple
  lines
  by
  doing this.
  """
print(bigString)
//You can have a string
//that contains multiple
//lines
//by
//doing this.
