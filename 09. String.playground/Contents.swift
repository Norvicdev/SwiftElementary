/*
/*: ## 09. String (–°—Ç—Ä–æ–∫–∏) */
/*: ### Part 1. Strings as collections (–°—Ç—Ä–æ–∫–∏ –∫–∞–∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏)*/
let string = "Matt"
for char in string {
    print(char)
}
//M
//a
//t
//t

let stringLength = string.count
print(stringLength) // 4

//  let fourthChar = string[3] // error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead. (–æ—à–∏–±–∫–∞: 'subscript(_:)' –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥–∑–∞–ø–∏—Å–∞—Ç—å String —Å Int, –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ String.Index.)

/*: ### Part 2. Grapheme clusters (–ì—Ä–∞—Ñ–µ–º–Ω—ã–µ –∫–ª–∞—Å—Ç–µ—Ä—ã) */
//: a grapheme cluster
let cafeNormal = "caf√©"
let cafeCombining = "cafe\u{0301}"
cafeNormal.count // 4
cafeCombining.count // 4

cafeNormal.unicodeScalars.count     // 4
cafeCombining.unicodeScalars.count  // 5

for codePoint in cafeCombining.unicodeScalars {
    print(codePoint.value)
}
// 99
// 97
// 102
// 101
// 769

/*: ### Part 3. Indexing strings (–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫) */
let firstIndex = cafeCombining.startIndex // String.Index
let firstChar = cafeCombining[firstIndex] // c

// let lastIndex = cafeCombining.endIndex
// let lastChar = cafeCombining[lastIndex] // Swift/StringRangeReplaceableCollection.swift:302: Fatal error: String index is out of bounds (–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞: –°—Ç—Ä–æ–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –≤—ã—à–µ–ª –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã)

let lastIndex = cafeCombining.index(before: cafeCombining.endIndex) // String.Index
let lastChar = cafeCombining[lastIndex] // "eÃÅ"

// –í –∫–∞—á–µ—Å—Ç–≤–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–º–µ—â–µ–Ω–∏–µ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ —Å–∏–º–≤–æ–ª–∞
let fourthIndex = cafeCombining.index(cafeCombining.startIndex,
                                      offsetBy: 3)
let fourthChar = cafeCombining[fourthIndex]

fourthChar.unicodeScalars.count //  2
fourthChar.unicodeScalars.forEach { codePoint in
    print(codePoint.value)
}
// 101
// 769

/*: ### Part 4. Indexing strings (–ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫) */
let equal = cafeNormal == cafeCombining // true

/*: ### Part 5. Strings as bi-directional collections (–°—Ç—Ä–æ–∫–∏ –∫–∞–∫ –¥–≤—É–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏) */
let name = "Matt"
let backwardsName = name.reversed() // ReversedCollection<String>

let secondCharIndex = backwardsName.index(backwardsName.startIndex,
                                          offsetBy: 1) // ReversedCollection<String>.Index
let secondChar = backwardsName[secondCharIndex] // "t"
let backwardsNameString = String(backwardsName) // "ttaM"

/*: ### Part 6. Raw strings (–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏) */
let raw1 = #"Raw "No Escaping" \(no interpolation!). Use all the \ you want!"#
print(raw1)
// > Raw "No Escaping" \(no interpolation!). Use all the \ you want!

let raw2 = ##"Aren‚Äôt we "# clever"##
print(raw2)
// Aren‚Äôt we "# clever

let can = "can do that too"
let raw3 = #"Yes we \#(can)!"#
print(raw3)
// > Yes we can do that too!

let multiRaw = #"""
  _____         _  __ _
 / ____|       (_)/ _| |
| (_____      ___| |_| |_
 \___ \ \ /\ / / |  _| __|
 ____) \ V  V /| | | | |_
|_____/ \_/\_/ |_|_|  \__|
"""#
print(multiRaw)

/*: ### Part 7. Substrings (–ü–æ–¥—Å—Ç—Ä–æ–∫–∏) */
let fullName = "Matt Galloway" // "Matt Galloway"
let spaceIndex = fullName.firstIndex(of: " ")! // String.Index
// let firstName = fullName[fullName.startIndex..<spaceIndex] // "Matt"

let firstName = fullName[..<spaceIndex] // "Matt"
let lastName = fullName[fullName.index(after: spaceIndex)...]
// "Galloway"

let lastNameString = String(lastName)

/*: ### Part 8. Character properties (–°–≤–æ–π—Å—Ç–≤–∞ —Å–∏–º–≤–æ–ª–æ–≤) */
// –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —Å–∏–º–≤–æ–ª –∫ –Ω–∞–±–æ—Ä—É —Å–∏–º–≤–æ–ª–æ–≤ ASCII
let singleCharacter: Character = "x"
singleCharacter.isASCII // true

// –ø—Ä–æ–±–µ–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª (whitespace)
let space: Character = " "
space.isWhitespace // true

// –ø—Ä–æ–≤–µ—Ä–∫–∞ - —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–∏–º–≤–æ–ª —à–µ—Å—Ç–Ω–∞–¥—Ü–∞—Ç–µ—Ä–∏—á–Ω–æ–π —Ü–∏—Ñ—Ä–æ–π
let hexDigit: Character = "d"
hexDigit.isHexDigit // true

let thaiNine: Character = "‡πô"
thaiNine.wholeNumberValue // 9

/*: ### Part 9. Encoding (–ö–æ–¥–∏—Ä–æ–≤–∫–∞) */
//: UTF-8
let char = "\\u{00bd}"
for i in char.utf8 {
    print(i)
}
// 92
// 117
// 123
// 48
// 48
// 98
// 100
// 125

// +¬Ω‚á®üôÉ
let characters = "+\\u{00bd}\\u{21e8}\\u{1f643}"
for i in characters.utf8 {
  print("\\(i) : \\(String(i, radix: 2))")
}
// \(i) : \(String(i, radix: 2))
// 43 : 101011
//
// 194 : 11000010
// 189 : 10111101
//
// 226 : 11100010
// 135 : 10000111
// 168 : 10101000
//
// 240 : 11110000
// 159 : 10011111
// 153 : 10011001
// 131 : 10000011

//: UTF-16
for i in characters.utf16 {
  print("\\(i) : \\(String(i, radix: 2))")
}
// \(i) : \(String(i, radix: 2))
// 43 : 101011
//
// 189 : 10111101
//
// 8680 : 10000111101000
//
// 55357 : 1101100000111101
// 56899 : 1101111001000011

/*: ### Part 10. Converting indexes between encoding views (–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –º–µ–∂–¥—É –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏) */
let arrowIndex = characters.firstIndex(of: "\\u{21e8}")!
characters[arrowIndex] // ‚á®

if let unicodeScalarsIndex = arrowIndex.samePosition(in: characters.unicodeScalars) {
  characters.unicodeScalars[unicodeScalarsIndex] // 8680
}

if let utf8Index = arrowIndex.samePosition(in: characters.utf8) {
  characters.utf8[utf8Index] // 226
}

if let utf16Index = arrowIndex.samePosition(in: characters.utf16) {
  characters.utf16[utf16Index] // 8680
}
 */
